%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/jandegraaff/Documents/New Folder/table.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/12/05 17:51:57

%% Initialize variables.
filename = '/Users/jandegraaff/Documents/New Folder/table.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column1: text (%s)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
Date = dataArray{:, 1};
Open = dataArray{:, 2};
High = dataArray{:, 3};
Low = dataArray{:, 4};
Close = dataArray{:, 5};
Volume = dataArray{:, 6};
AdjClose = dataArray{:, 7};


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% Least squares method for finding parameters for drift and volatility
S = fliplr(transpose(Close));

%time denotes the length of the array (the amount of days)
time = size(S);
time = time(2);

Yvalues = log(S);

Array1 = ones(time,1);

Array2 = transpose(linspace(0,time,time));

X = [Array1 Array2];

XT = transpose(X);

BetaHat = inv(XT*X)*XT*transpose(Yvalues);

S0 = exp(BetaHat(1));
mu = BetaHat(2);

TimeArray = linspace(0,time,time);

LeastSq = S0*exp(mu*TimeArray);
LeastSq2 = S(1)*exp(mu*TimeArray);

figure;
plot(S)
hold on;
plot(TimeArray,LeastSq);
hold on;
plot(TimeArray,LeastSq2);
hold off;

figure;
plot(S-LeastSq2);
hold off;

%% We try to guess the value of the volatility parameter sigma

trials = 6;

sigma = 0.005;

figure;
plot(TimeArray,S);
hold on;

for i = 1 : trials;
    temp = S(1) *exp((mu-0.5*sigma*sigma)*TimeArray+sigma*BM(TimeArray));
    plot(TimeArray,temp);
    hold on;
end;